import java.sql.Connection;
import java.sql.Driver;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.ResourceBundle;
import java.util.logging.Level;
import java.util.logging.Logger;
import static javax.management.remote.JMXConnectorFactory.connect;
import fr.centrale.nantes.worldofecn.world.World;
import java.sql.*;


/**
 * Manage database connectio, saves and retreive informations
 * @author ECN
 */
public class DatabaseTools {

    private String login;
    private String password;
    private String url;
    private Connection connection;

    /**
     * Load infos
     */
    public DatabaseTools() {
        try {
            // Get Properties file
            ResourceBundle properties = ResourceBundle.getBundle(DatabaseTools.class.getPackage().getName() + ".database");

            // USE config parameters
            login = properties.getString("login");
            password = properties.getString("password");
            String server = properties.getString("server");
            String database = properties.getString("database");
            url = "jdbc:postgresql://" + server + "/" + database;

            // Mount driver
            Driver driver = DriverManager.getDriver(url);
            if (driver == null) {
                Class.forName("org.postgresql.Driver");
            }
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(DatabaseTools.class.getName()).log(Level.SEVERE, null, ex);
            // If driver is not found, cancel url
            url = null;
        }
        this.connection = null;
    }

    /**
     * Get connection to the database
     */
    public void connect() {
        if ((this.connection == null) && (url != null) && (! url.isEmpty())) {
            try {
                this.connection = DriverManager.getConnection(url, login, password);
            } catch (SQLException ex) {
                Logger.getLogger(DatabaseTools.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    /**
     * Disconnect from database
     */
    public void disconnect() {
        if (this.connection != null) {
            try {
                this.connection.close();
                this.connection = null;
            } catch (SQLException ex) {
                Logger.getLogger(DatabaseTools.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    /**
     * get Player ID
     * @param nomJoueur : le login du joueur
     * @param password : le mot de passe du joueur
     * @return
     */
    public int getPlayerID(String nomJoueur, String password) throws SQLException {
        // TO BE DEFINED
        // retreive player ID according to his/her name (unique) and password from database
        // may return null if player is not found, the database ID if found.
        
        
        
        if (this.connection != null) {
            String query = "SELECT id_joueur FROM Joueur WHERE pseudo=?";
            PreparedStatement stmt = this.connection.prepareStatement(query);
            stmt.setString(1, login);
            ResultSet res = stmt.executeQuery();
            if (res!=null){
                if(res.next()){
                    int id = res.getInt("id_joueur");
                    return id;
                }
            }
            stmt.close();
        }
        return 0;
    }

    /**
     * save world as sauvegarde in database
     * @param idJoueur : l'ID du joueur dans la BD
     * @param nomPartie : le nom de la partie
     * @param nomSauvegarde : le nom de la sauvegarde
     * @param monde: le monde à enregistrer
     */
    public void saveWorld(Integer idJoueur, String nomPartie, String nomSauvegarde, World monde) {
        // TO BE DEFINED
        
        // Create a new "partie" in database if it does not exists and link it to the player
        // Save partie's infos in the sauvegarde (height, width, ...) if necessary
        
        // Create a new sauvegarde if it does not exist for the partie
        // Update sauvegarde infos for the partie
        // Remove existing elements de jeu for the sauvegarde
        // Save world's elementdejeu in database
        
        // Save player infos and the player's creature infos for this partie
        
    }

    /**
     * get world sauvegarde from database
     * @param idJoueur
     * @param nomPartie
     * @param nomSauvegarde
     * @return monde
     */
    public World readWorld(Integer idJoueur, int nomPartie, String nomSauvegarde) throws SQLException {
        
        // Attributs:
        
        
        
            try{
                    /**Connection connection = DriverManager.getConnection(”jdbc :postgresql ://localhost/test”, ”prweb”, ”prweb”);*/
                // Retreive partie infos for the player
                    String query = "SELECT * FROM Partie Join Joueur ON Joueur.id_Joueur=Partie.id_partie WHERE nomPartie=? and id_joueur=?";
                    PreparedStatement stmt = this.connection.prepareStatement(query);
                    stmt.setInt(2, nomPartie);
                    stmt.setInt(1, idJoueur);
                    ResultSet res1 = stmt.executeQuery();
                    World monde;
                    while(res1.next()){
                        /**on recupere la hauteur et la longueur du monde en 1 fois ici*/
                        int local_height = res1.getInt("hauteur");
                        int local_width = res1.getInt("largeur");
                        /**on crée un nouveau monde*/
                        monde = new World(local_width, local_height);
                        /** la methode world crée 
                        *this.listElements = new LinkedList<ElementDeJeu>();
                        *this.player = new Joueur("Player");
                        * il faut initialiser login et password
                        *this.positions = new ArrayList<Point2D>();
                        */
                        monde.getPlayer().setLogin(res1.getString("login"));
                        monde.getPlayer().setPassword(res1.getString("password"));
                    
            /**
                    this.listElements = new LinkedList<ElementDeJeu>();
                    this.positions = new ArrayList<Point2D>();
                    les listes sont crées et ensuite remplie par la methode generate
                    d'abord race, metier et joueur et ajouter à liste Elements*/
                    /*initailisation des attributs de joueur rajout de getter et setter dans la classe joueur*/
                        monde.getPlayer().getPersonnage().setMetier(res1.getString("metier"));
                        monde.getPlayer().getPersonnage().setRace(res1.getString("race"));
                    }
                    
                    /** les listes listElements et positions sont initialisées*/
                    stmt.close();
                    
                // Retreive sauvegarde infos for the partie
                    String query2 = "SELECT * FROM Partie Join Sauvegarde ON nomSauvegarde.id_Joueur=Partie.id_partie WHERE nomPartie=? and nomSauvegarde=?";
                    PreparedStatement stmt2 = this.connection.prepareStatement(query2);
                    stmt2.setInt(1, nomPartie);
                    stmt2.setString(2, nomSauvegarde);
                    ResultSet res2 = stmt2.executeQuery();
         
                    while(res2.next()){
                        /**attributs de sauvegarde pour le monde world  ??*/
                        int id_partie = res2.getInt("id_partie");
                        int id_sauv = res2.getInt("id_sauv");
                    }
                     stmt2.close(); 
                     // Retreive world infos
                     /*recuperer les personnage creaturehumaine monstre dans des listes*/ 
                     
                     /* générer Creature humaine, Monstre et objet les rajouter à positions et à listElements*/
                    String query3 = "SELECT * FROM Monstre Join Sauvegarde ON nomSauvegarde.id_sauvegarde=Monstre.id_sauvegarde WHERE nomSauvegarde=?";
                    PreparedStatement stmt3 = this.connection.prepareStatement(query3);
                    stmt3.setString(1, nomSauvegarde);
                    ResultSet res3 = stmt3.executeQuery();
                    while(res3.next()){
                        /**récupérer les différents attributs de monstres*/
                        Monstre monstre = new Monstre(monde);
                        monstre.setRace()=res3.getString("race");
                        
                        monstre.setpourcentAttaque(res3.getString("pageatt"));
                        monstre.setDegatsAttaque(res3.getString("degatt"));
                        monstre.setPourcentEsquive(res3.getString("pageesq"));
                        monstre.setPVieMax(res3.getString("ptvie_max"));
                        monstre.setPVie(res3.getString("ptvie"));
                        monstre.setPosition(res3.getPoint2D("position"));
                        
                        
                        /*rajout d'un monstre*/
                        monde.getListElements().add(monstre);
                        monde.getRoundElements().add(monstre);
                    }
                     stmt3.close(); 
                     
                    String query4 = "SELECT * FROM creaturehumaine Join Sauvegarde ON nomSauvegarde.id_sauvegarde=creaturehumaine.id_sauvegarde WHERE nomSauvegarde=?";
                    PreparedStatement stmt4 = this.connection.prepareStatement(query4);
                    stmt4.setString(1, nomSauvegarde);
                    ResultSet res4 = stmt4.executeQuery();
                    while(res4.next()){
                        /**récupérer les différents creaturehumaine*/
                        Personnage perso = new Personnage(monde);

                        
                        perso.setRace(res4.getString("race"));
                        perso.setMetier(res4.getString("metier"));
                        perso.setPourcentParade(res4.getInt("pagepar"));
                        perso.setValeurParade(res4.getInt("pageesq"));
                        perso.setPMagieMax(res4.getInt("ptmag_max"));
                        perso.setPMagie(res4.getInt("ptmag_act"));
                        perso.setPortee(res4.getInt("portee"));
                        perso.setPosition(res4.getPoint2D("position"));
                        /*rajout de la personnage*/
                        monde.getListElements().add(perso);
                        monde.getRoundElements().add(perso);
                        
                    }
                     stmt4.close(); 
                    // Generate object world according to the infos
                    // Generate approprite objects
                    String query5 = "SELECT * FROM Objet Join Sauvegarde ON nomSauvegarde.id_sauvegarde=Objet.id_sauvegarde WHERE nomSauvegarde=?";
                    PreparedStatement stmt5 = this.connection.prepareStatement(query5);
                    stmt5.setString(1, nomSauvegarde);
                    ResultSet res5 = stmt5.executeQuery();
                    while(res5.next()){
                        /**récupérer les différents objets*/
                        Objet objet = new Objet(monde);
                        
                        objet.setType(res4.getInt("portee"));
                        objet.setPosition();
                        
                        /*rajout de l'objet*/
                        monde.getListElements().add(objet);
                        monde.getRoundElements().add(objet);
                    }
                     stmt5.close(); 
        
                    
                    
                    
                    
                    
                    
                       
                    // Link objects to the world
                    
                    /**solution : requête SQL concernant l'ajou de lien */
                    
                    // Associate player with the player's creature
                    
    
    
                    // Return created world
                    return monde;
                     
                     
                    
                     
                     }
        catch(java.lang.ClassNotFoundException e) {
                System.err.println("ClassNotFoundException : " + e.getMessage());
            }
}}
