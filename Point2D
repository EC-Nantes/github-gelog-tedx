/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package org.centrale.objet.WoE;

import java.util.ArrayList;

/**
 * Abscisse x et ordonnée y d'un point dans un plan cartésien
 * @author vdufo
 */
public class Point2D {


    /**
     *
     */
    public int x;

    /**
     *
     */
    public int y;  // Constructeurs et Méthodes
    
    /**
     *
     * @param x
     * @param y
     */
    public Point2D(int x, int y){
        this.x = x;
        this.y = y;
    }
    
    /**
     *
     * @param p
     */
    public Point2D(Point2D p){
        this.x = p.x;
        this.y = p.y;
    }
    
    /**
     *
     */
    public Point2D(){
        this.x = 0;
        this.y = 0;
    }
    
    /**
     *
     * @param x
     */
    public void setX(int x){
        this.x = x;
    }
    
    /**
     *
     * @param y
     */
    public void setY(int y){
        this.y = y;
    }
    
    /**
     *
     * @return
     */
    public int getX(){
        return this.x;
    }
    
    /**
     *
     * @return
     */
    public int getY(){
        return this.y;
    }
    
    /**
     *
     * @param a
     * @param b
     */
    public void setPosition(int a, int b){
        x = a;
        y = b;
    }
    
    /**
     *
     * @param dx
     * @param dy
     */
    public void translate(int dx, int dy){
        x += dx;
        y += dy;
    }
    
    public boolean equals(Point2D A){
        return A.getX()== this.getX() && A.getY()==this.getY();
    }
    /**
     *
     * @return
     */
    @Override
    public String toString(){
        String aff = "["+x+";"+y+"]";
        return aff;
    }
    
    
    /**
     *
     * @param p
     * @return
     */
    public double distance(Point2D p){
        return Math.sqrt(p.x*p.x+p.y*p.y);
    }
    
    public double distancecrea(Point2D p1,Point2D p2){
        return Math.sqrt(Math.pow(p1.x*p1.x-p2.x*p2.x,2) + Math.pow(p1.y*p1.y-p2.y*p2.y,2));
    }
    
    public ArrayList<Point2D> caseAdj(){
        ArrayList<Point2D> positionAdj = new ArrayList<>();
        int x = this.getX();
        int y = this.getY();
        positionAdj.add(new Point2D(x+1,y));
        positionAdj.add(new Point2D(x+1,y+1));
        positionAdj.add(new Point2D(x,y+1));
        positionAdj.add(new Point2D(x-1,y+1));
        positionAdj.add(new Point2D(x-1,y));
        positionAdj.add(new Point2D(x-1,y-1));
        positionAdj.add(new Point2D(x,y-1));
        positionAdj.add(new Point2D(x+1,y-1));
        return positionAdj;
    }
    
}
