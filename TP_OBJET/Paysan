/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package org.centrale.objet.WoE;

import java.util.ArrayList;
import java.util.Random;

/**
 * Classe de gestion des paysans
 * @author vdufo
 */
public class Paysan extends Personnage implements Deplacable{
    
    /**
     * Constructeur d'un paysan
     * @param n nom 
     * @param pV point de vie
     * @param pVmax point de vie max
     * @param dA dégât d'attaque
     * @param pPar point de parade
     * @param paPar pourcentage de parade
     * @param paAtt pourcentage d'attaque
     * @param dMax distance d'attaque max
     * @param p position
     */
    public Paysan(String n, int pV,int pVmax, int dA, int pPar, int paPar,int paAtt, int dMax, Point2D p){
        super(n, pV,pVmax, dA, pPar, paPar, paAtt, dMax, p);    
    }
    
    /**
     * Constructeur d'un paysan à partir d'un autre paysan
     * @param p
     */
    public Paysan(Paysan p){
        super((Paysan)p);
    }
    
    /**
     * Constructeur par défaut d'un paysan
     */
    public Paysan(){
        super("PaysanInit",40,40, 5, 15, 10, 10, 10, new Point2D(0,0));
    }
    private boolean verif(Point2D A, ArrayList<Point2D> liste){
       boolean rep = false;
        for(Point2D element: liste){
            if (A.equals(element)){
                rep = true;
                break;
            }
        } 
        return rep;
    }
    
    @Override
    public String nomClasse(){
        return "Paysan";
    }
    
/**
     * verif prend en paramêtre A un Point2D et une liste de Point2D 
     * regarde si le Point2D appartient à la liste
     * retournant ainsi vrai si le point y est
     * @param A
     * @param liste
     * @return 
     */
        private boolean verif(Point2D A, ArrayList<Point2D> liste){
       boolean rep = false;
        for(Point2D element: liste){
            if (A.equals(element)){
                rep = true;
                break;
            }
        } 
        return rep;
    }
    /**
     * Cette methode prend en parametre une liste, la nouvelle position et l'ancienne position
     * elle permet de modifier la position d'un Point2D ancienne position en le faisant pointer sur un autre Point2D la nouvelle position
     * @param liste
     * @param anciennePos
     * @param nouvellePos 
     */
    private void modifListe(ArrayList<Point2D> liste, Point2D anciennePos, Point2D nouvellePos){
        for (int i =0;i<liste.size();i++){
            if (liste.get(i).equals(anciennePos)){
                liste.set(i, nouvellePos);
            }
        }
    }
    
    /**
     * Méthode sans paramètre d'entrée qui modifie en place la position d'un personnage.
     * Il peut se déplacer de manière aléatoire sur une case adjacente à la sienne.
     * On suppose qu'il ne peut pas rester sur la même case.
     * @param liste liste de Point2D cette liste représente toutes les cases occupées par les elements du jeu
     */
    @Override
    public void deplace(ArrayList<Point2D> liste){
        Random genx = new Random();
        Random geny = new Random();
        int dx = 0;
        int dy = 0;
        while (dx == 0 && dy == 0){
        dx = genx.nextInt(3)-1;
        dy = geny.nextInt(3)-1;   
        }
        Point2D tempo = new Point2D(this.getPos());
        tempo.translate(dx,dy);
        
        // vérification qu'il est dans la liste
        boolean rep = verif(tempo,liste);
        while(rep){
            tempo.translate(-dx,-dy);
            while (dx == 0 && dy == 0){
                dx = genx.nextInt(3)-1;
                dy = geny.nextInt(3)-1;   
            }
            tempo.translate(dx,dy);
            rep = verif(tempo,liste);
        }
        
        //Si on sort de la boucle while, alors positionpas dans la liste on deplace et on l'actualise
        modifListe(liste,tempo,this.getPos());
        this.getPos().translate(dx,dy);  

    }

    /**
     *Méthode qui affiche le nombre de point de vie et la position d'un personnage
     */
    @Override
    public void affiche(){
        // Quand on cherche à afficher un monstre, on veut voir son nombre de point de vie et sa position
        //System.out.println("Point de vie : "+ this.getPtVie());
        //System.out.println("Position : "+ this.getPos().toString());  
        System.out.printf(" "+'p'+" ");
    }
}
