/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package org.centrale.objet.WoE;
import static java.lang.Integer.parseInt;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Scanner;

/**
 *
 * @author vdufo
 */
public class Joueur {
    private Personnage perso;
    private String nom;
    private ArrayList<Utilisable> effets;
    private ArrayList<Utilisable> inventaire;
    
    public Joueur(){
        Scanner scanner = new Scanner(System.in);
        System.out.println("Choisissez un personnage jouable : ");
        String p = scanner.nextLine();
        System.out.println("Quel nom voulez-vous lui donner ? ");
        String n = scanner.nextLine();
        System.out.println();
        boolean rep = true;
        while(rep){
            
        switch(p){
            case "Guerrier":
                this.nom = n;
                this.perso = new Guerrier(this.nom,80,80,30,10,12,100,15,new Point2D(0,0));
                rep = false;
                break;
            case "Archer":
                this.perso = new Archer();
                this.nom = n;
                rep=false;
                break;
            default:
                System.out.println("Personnage injouable");
                System.out.println("Choisissez un personnage jouable : ");
                p = scanner.nextLine();
                break;
            }
        } 
        this.effets = new ArrayList<>();
        this.inventaire = new ArrayList<>();
    }
    
    public void ajouterPerso(World monde){
        monde.getLesCreatures().add(perso);
        monde.getPosition().add(this.perso.getPos());
    }
    public Personnage getPerso(){
        return this.perso;
    }
    
    public String getNom(){
        return this.nom;
    }
    
    /**
     * Méthode qui permet de savoir si une position appartient à une liste de positions
     * @param A position (Point2D) à tester
     * @param liste liste de positions (Point2D) 
     * @return true si la position appartient à la liste, false sinon
     */
    private boolean verif(Point2D A, ArrayList<Point2D> liste){
       boolean rep = false;
        for(Point2D element: liste){
            if (A.equals(element)){
                rep = true;
                break;
            }
        } 
        return rep;
    }
    
    /**
     * Méthode qui permet au joueur de choisir où il veut se déplacer selon les positions disponibles
     * @param monde Monde dans lequel joue le joueur
     */
    public void deplacePerso(World monde){
        Scanner demandeDeplace = new Scanner(System.in);
        
        // Récupération des listes utiles à la méthode
        ArrayList<Point2D> positionPossible = monde.getPosition();
        Point2D positionActuel = this.perso.getPos();
        ArrayList<Point2D> positionAdj = positionActuel.caseAdj();
        ArrayList<Point2D> positionDep = new ArrayList<>();
        
        // Affichage non nécessaire des positions adjacente à celle du personnage et des positions de tous les autres personnages
        System.out.println("Position des perso du monde : "+positionPossible);
        System.out.println("Position des objets : "+monde.getPositionObjet());
        
        // Pour toutes les positions adjacentes, si un autre personnage est déjà à cette position, alors le joueur ne pourra pas aller là
        // On crée alors la liste des positions sur lesquelles le joueur va pouvoir aller
        for (Point2D position : positionAdj){
            if(!verif(position,positionPossible)){
                positionDep.add(position);
            }
        }
        
        // On donne la liste des positions sur lesquelles peut se déplacer le joueur et on lui demande où il veut se déplacer
        System.out.println("Voici les positions disponibles : "+positionDep);
        System.out.println("Sur quelle abcisse voulez-vous déplacer votre personnage (x) ?  ");
        String xDep = demandeDeplace.nextLine();
        System.out.println("Sur quelle abcisse voulez-vous déplacer votre personnage (y) ?  ");
        String yDep = demandeDeplace.nextLine();
        Point2D nouvellePosition= new Point2D(Integer.parseInt(xDep),Integer.parseInt(yDep));
        
        // On vérifie que la position rentrée est bien valide, tant qu'elle ne l'est pas, on redemande  au joueur où il veut se déplacer
        boolean rep = false;
        while(!rep){
            if(verif(nouvellePosition,positionDep)){
            rep = true;
            }
            else{
                System.out.println("La position que vous avez rentré n'est pas disponible, veuillez en rentrer une autre.");
                System.out.println("Voici les positions disponibles : "+positionDep);
                System.out.println("Sur quelle abcisse voulez-vous déplacer votre personnage (x) ?  ");
                xDep = demandeDeplace.nextLine();
                System.out.println("Sur quelle abcisse voulez-vous déplacer votre personnage (y) ?  ");
                yDep = demandeDeplace.nextLine();
                nouvellePosition= new Point2D(Integer.parseInt(xDep),Integer.parseInt(yDep));
            }
        }
        
        // Affectation de la nouvelle position du personnage du joueur
        perso.setPos(nouvellePosition);
        // Si il est sur une position sur laquelle il y a un objet, il le ramasse et l'ajoute donc à son inventaire
        Utilisable objetR = ramasserObjet(monde);
        if (objetR != null){
            objetR.objetRamasse();
            System.out.println("Vous avez ramassé un objet, voulez vous voir votre inventaire ?");
            String reponse = demandeDeplace.nextLine();
            if ("oui".equals(reponse)){
                if (inventaire.isEmpty()){
                    System.out.println("L'inventaire est vide, vous ne pouvez rien faire");
                }
                else{
                    int compteur = 1;
                    System.out.println("Voici les éléments de votre inventaire");
                    for(Utilisable util : this.inventaire){
                        System.out.println(compteur+" : "+util.nomClasse()+" de niveau "+util.getNiveau());
                        compteur++;
                    }
                }
            }
        }
    }
    
    /**
     * Méthode qui permet de savoir quel objet utilisable se trouve à une certaine position. 
     * La construction du monde nous permet de savoir qu'il n'y a qu'une seule possibilité d'objet au maximum à cette position
     * @param A position d'un élément à tester
     * @param liste liste d'objets utilisables
     * @return ArrayList vide si il n'y a pas d'objet à la position donnée et contenant uniquement l'objet à cette position dans le cas inverse
     */
    private ArrayList<Utilisable> verif2(Point2D A, ArrayList<Utilisable> liste){
       ArrayList<Utilisable> rep = new ArrayList<>();
        for(Utilisable element: liste){
            if (A.equals(((Objet) element).getPos())){
                rep.add(element);
                break;
            }
        } 
        return rep;
    }
    
    /**
     * Méthode qui prend en entrée un monde et qui teste si un objet se trouve sur la position du joueur
     * Si oui, alors le joueur ramasse cet objet : on l'ajoute à son inventaire et on le retire du monde
     * @param monde 
     * @return true si un objet a été ramassé, false sinon
     */
    public Utilisable ramasserObjet(World monde){
        ArrayList<Utilisable> listeUtil = new ArrayList<>();
        
        // Pour tous les objets du monde, on regarde si c'est des objets ramassables et donc utilisables
        for(Objet o :monde.getObjets()){
            if (o instanceof Utilisable utilisable){
                listeUtil.add(utilisable);
            }
        }
        // Pour les objets utilisables, on regarde si ils se trouvent à la position du personnage joué
        ArrayList<Utilisable> objetSurPos = verif2(perso.getPos(),listeUtil);
        if (!objetSurPos.isEmpty()){
            inventaire.add(objetSurPos.get(0)); // Normalement il n'y a qu'un objet par case
            // Retirer l'objet et sa position du monde
            monde.supprimerObjet(objetSurPos.get(0));
            return objetSurPos.get(0);
        }
        else{
            return null;
        }
        
    }
    
    /**
     * Méthode de combat 
     * @param monde Monde dans lequel joue le joueur
     */
    public void combattrePerso(World monde){
        
        // Initialisation et récupération des listes dont on va avoir besoin
        ArrayList<Point2D> positionPossible = monde.getPosition();
        Point2D positionActuel = this.perso.getPos();
        ArrayList<Point2D> positionAdj = positionActuel.caseAdj();
        ArrayList<Creature> creaAComb = new ArrayList<>();
        ArrayList<Creature> creaMonde = monde.getLesCreatures();
        
        // Affichage non nécessaire des positions adjacente à celle du personnage et des positions de tous les autres personnages
        System.out.println("Position adj : "+positionAdj);
        System.out.println("Position des perso du monde : "+positionPossible);
        
        // Pour toutes les créatures du monde, ajouter à la liste celles qui peuvent combattre le personnage joué
        for (Creature c : creaMonde){
            if(verif(c.getPos(),positionAdj)){
                creaAComb.add(c);
            }
        }
        
        int vie = 0;
        
        if (creaAComb.isEmpty()){
            System.out.println("Aucun personnage à combattre");
        }
        else{
            for (Creature c :creaAComb){
                vie = c.getPtVie();
                if (this.perso instanceof Guerrier guerrier){
                    guerrier.combattre(c);
                }
                else{
                ((Archer)this.perso).combattre(c);
                }
                vie -= c.getPtVie();
                System.out.println("Votre personnage a combattu un "+c.typeCrea());
                System.out.println("Il a fait "+vie+" degats.");
            }
        }
        
    }
    
    /**
     * Méthode qui affiche l'inventaire du joueur et qui lui propose d'en utiliser un
     * Si
     * @param nTDJ numéro du tour de jeu en cours
     */
    public void voirInventaire(int nTDJ){
        int compteur = 1;
        
        if (inventaire.isEmpty()){
            System.out.println("L'inventaire est vide, vous ne pouvez rien faire");
        }
        else{
            System.out.println("Voici les éléments de votre inventaire");
            for(Utilisable util : this.inventaire){
                System.out.println(compteur+" : "+util.nomClasse()+" de niveau "+util.getNiveau());
                compteur++;
            }
            // Demander s'il veut utiliser un objet
            Scanner demandeInv = new Scanner(System.in);
            System.out.println("Voulez-vous utiliser un objet ?");
            String answer = demandeInv.nextLine();
            
            // Si oui, ajouter l'objet à utiliser et l'activer pour des tours de jeu
            if("oui".equals(answer)){
                System.out.println("Quel élément voulez vous utiliser ?");
                int obj = parseInt(demandeInv.nextLine())-1;
            
                // On passe l'objet de l'inventaire à effets
                effets.add(inventaire.get(obj));
                inventaire.get(obj).activer(this.perso, nTDJ);
                inventaire.remove(obj);
            }
            
            
        } 
    }
    
    /**
     * Méthode qui parcourt la liste des effets du joueur et qui les enlève s'ils sont épuisés.
     * Cette méthode doit être appelé à la fin de chaque tour de jeu
     * @param compteur numéro du tour de jeu dans lequel on est 
     */
    public void verifEffet(int compteur){
        for (Utilisable e :this.effets){
            if (e instanceof Nourriture nourriture){
                if((compteur - nourriture.getCompteur()) == nourriture.getTourActif()){
                    e.retirer(this.perso);
                }
            }
            else{
                if( (((Objet)e).getPdurabilite()) == 0){
                    e.retirer(this.perso);
            }
            }
        }
    }
    
    public void tourDeJeuPerso(World monde, int numeroTDJ){
        Scanner demande = new Scanner(System.in);
        System.out.println("Voulez-vous combattre (1), vous déplacer (2), voir votre inventaire (3) ou ne rien faire (4) ? ");
        String aFaire = demande.nextLine();
        boolean repTDJ = true;
        while(repTDJ){
            switch(aFaire){
                case "1":
                    repTDJ = false;
                    this.combattrePerso(monde);
                    break;
                case "2":
                    repTDJ = false;
                    System.out.println("Position actuelle : "+perso.getPos());
                    this.deplacePerso(monde);
                    System.out.println("Nouvelle position : "+perso.getPos());
                    break;
                case "3":
                    repTDJ = false;
                    this.voirInventaire(numeroTDJ);
                    break;
                case "4":
                    repTDJ = false;
                    System.out.println("Le personnage ne fait rien.");
                    break;
                default:
                    System.out.println("Demande erronée, veuillez à bien entrer ce que vous voulez faire.");
                    System.out.println("Voulez-vous 'Combattre', 'Deplacer' ou 'Ne rien faire' ? ");
                    aFaire = demande.nextLine();
                    break;
            }
        }
        
    }
}
