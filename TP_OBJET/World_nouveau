
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package org.centrale.objet.WoE;
import java.util.Random ;
import java.util.ArrayList;

/**
 * Classe de gestion d'un monde contenant un archer, un paysan et 2 lapins
 * @author vdufo
 */
public class World {
    // Attributs de la classe
    /** 
     * robin liste d'archers (privé)
     * peon liste de paysans (privé)
     * bugs liste de lapins (privé)
     * warrior liste de guerriers (privé)
     * wolfie liste de loups (privé)
     * lescreatures liste de toutes les créatures(privé)
     * position liste des positions de tous les personnages (privé)
     */

    private ArrayList<Creature> lesCreatures;
    private ArrayList<Point2D> position;
    private ArrayList<Objet> lesObjets;
    private ArrayList<Point2D> positionObjet;
    private Joueur joueur;
    
    
    final int hauteurMonde = 5;
    final int longueurMonde = 5;

    
    public ArrayList<Objet> getObjets(){
        return lesObjets;
    }

    /**
     * Constructeur de la classe Wolrd sans paramètre qui créer un monde alétoire de 1 à 20 créatures de chaque classe
     */
    public void setObjets(ArrayList<Objet> lesObjets) {
        this.lesObjets = lesObjets;
    }

    public World() {
        joueur= new Joueur();
        this.lesCreatures = new ArrayList<>();
        this.position = new ArrayList<>();
        final int nbrCrea =20;
        Random alea = new Random();
        int construire = alea.nextInt(nbrCrea)+1;
        /**creation d'objets dans le jeu*/
        for(int i=0; i< construire;i++){
            this.lesObjets.add(new PotionSoin(3,true,new Point2D(alea.nextInt(longueurMonde),alea.nextInt(hauteurMonde))));
            this.lesObjets.add(new Epee(3,true,new Point2D(alea.nextInt(longueurMonde),alea.nextInt(hauteurMonde))));
            this.lesObjets.add(new PeauDeBanane(true,new Point2D(alea.nextInt(longueurMonde),alea.nextInt(hauteurMonde)),false,alea.nextInt(3)));
            this.lesObjets.add(new Coca(true,new Point2D(alea.nextInt(longueurMonde),alea.nextInt(hauteurMonde)),true,alea.nextInt(3)));
            this.lesObjets.add(new NuageToxique(3,true,alea.nextInt(3),new Point2D(alea.nextInt(longueurMonde),alea.nextInt(hauteurMonde))));
            this.positionObjet.add(this.lesObjets.get(i).getPos());
        }
        
        
        for(int i=0; i< construire;i++){
            this.lesCreatures.add(new Archer());
            this.position.add(this.lesCreatures.get(i).getPos());
        }
        construire = alea.nextInt(nbrCrea)+1;
        for(int i=0; i< construire;i++){
            this.lesCreatures.add(new Paysan());
            this.position.add(this.lesCreatures.get(i).getPos());
        }
        construire = alea.nextInt(nbrCrea)+1;
        for(int i=0; i< construire;i++){
            this.lesCreatures.add(new Lapin());
            this.position.add(this.lesCreatures.get(i).getPos());
        }
        construire = alea.nextInt(nbrCrea)+1;
        for(int i=0; i< construire;i++){
            this.lesCreatures.add(new Guerrier());
            this.position.add(this.lesCreatures.get(i).getPos());
        }
        construire = alea.nextInt(nbrCrea)+1;
        for(int i=0; i< construire;i++){
            this.lesCreatures.add(new Loup());
            this.position.add(this.lesCreatures.get(i).getPos());
        }
    }



    public ArrayList<Creature> getLesCreatures() {
        return lesCreatures;
    }

    public void setLesCreatures(ArrayList<Creature> lesCreatures) {
        this.lesCreatures = lesCreatures;
    }

   /**
    * Accesseur sur l’attribut robin
    * @return robin 
    */
  
    
    /**
    * Accesseur sur l’attribut position
    * @return position
    */
    public ArrayList<Point2D> getPosition(){
        return position;
    }
    
    /**
    * Accesseur sur l’attribut creature
    * @return lescreatures
    */
    public ArrayList<Creature> getCreature(){
        return lesCreatures;
    }
    

    /**!! a mettre dans poit2D
     * Méthode privé memePosition qui vérifie si deux points sont identiques
     * @param A un point2D à tester
     * @param B un 2e point2D à tester
     * @return True si les coordonnées du point A et les coordonnées du points B sont identiques, False sinon
     */
    private boolean memePosition(Point2D A, ArrayList<Point2D> liste){
        boolean b = false;
        for(int i =0; i<liste.size();i++){
            if(A.getY()==liste.get(i).getY() && A.getX()==liste.get(i).getX()){
                b = true;
                break;
            }
        }
        return b;
    }
    
    
    /**
     * Méthode de création d'un monde aléatoire qui ne prend pas de paramètre en entrée et qui initialise les positions des personnages et créatures du monde
     * Les personnages et créatures ne sont pas initialisés à la même position
     * La méthode memePosition() est utilisé pour s'assurer de cela
     * Les coordonnées sont choisit aléatoirement sur une grille 10x10 à l'aide du package java random
     */
  public void creerMondeAlea(){
        joueur= new Joueur();
        Random alea = new Random();
        ArrayList<Point2D> listePosition = new ArrayList<>();
        ArrayList<Point2D> listePositionObjet = new ArrayList<>();
        listePosition.add(new Point2D(0,0)); // (0,0) position initiale du personnage joué
        
        /**creation des creatures*/
        for(int i = 0;i<this.lesCreatures.size();i++){
            Point2D position = this.lesCreatures.get(i).getPos();
            position.setPosition(alea.nextInt(longueurMonde),alea.nextInt(hauteurMonde));
            while(memePosition(position,listePosition)){
                System.out.println("MEME POSITION : "+position+" "+listePosition);
                position.setPosition(alea.nextInt(longueurMonde),alea.nextInt(hauteurMonde));
            }
            listePosition.add(position);
            this.position.set(i,position);
        }
        /**creation des objets utilisation de la meme structure que precedemment*/
        for(int i = 0;i<this.lesObjets.size();i++){
            Point2D position = this.lesObjets.get(i).getPos();
            position.setPosition(alea.nextInt(longueurMonde),alea.nextInt(hauteurMonde));
            while(memePosition(position,listePosition)){
                System.out.println("MEME POSITION : "+position+" "+listePosition);
                position.setPosition(alea.nextInt(longueurMonde),alea.nextInt(hauteurMonde));
            }
            listePositionObjet.add(position);
            this.position.set(i,position);
        }
        
    }  
    
    /**
     * Méthode sans paramètre en entrée qui permet d'afficher la position de tous les personnages ainsi que leur nombre de point de vie 
     */
    public void afficheWorld(){
        System.out.println(" ");
        int s1=1;
        int s2=1;
        int s3=1;
        int s4=1;
        int s5=1;
        for(int i = 0;i<this.lesCreatures.size();i++){
            
            if (this.lesCreatures.get(i) instanceof Guerrier){
                
                System.out.println("Guerrier numero "+s1+" :  Point de vie : "+this.lesCreatures.get(i).getPtVie()+", Position : "+this.lesCreatures.get(i).getPos().toString());
                s1+=1;
            }
            if (this.lesCreatures.get(i) instanceof Paysan){
                
                System.out.println("Paysan numero "+s2+" :  Point de vie : "+this.lesCreatures.get(i).getPtVie()+", Position : "+this.lesCreatures.get(i).getPos().toString());
                s2+=1;
            }
            if (this.lesCreatures.get(i) instanceof Lapin){
                
                System.out.println("Lapin numero "+s3+" :  Point de vie : "+this.lesCreatures.get(i).getPtVie()+", Position : "+this.lesCreatures.get(i).getPos().toString());
                s3+=1;
            }
            if (this.lesCreatures.get(i) instanceof Loup){
                
                System.out.println("Loup numero "+s4+" :  Point de vie : "+this.lesCreatures.get(i).getPtVie()+", Position : "+this.lesCreatures.get(i).getPos().toString());
                s4+=1;
            }
            if (this.lesCreatures.get(i) instanceof Guerrier){
                
                System.out.println("Guerrier numero "+s5+" :  Point de vie : "+this.lesCreatures.get(i).getPtVie()+", Position : "+this.lesCreatures.get(i).getPos().toString());
                s5+=1;
            }
            
        }
    }
        
        
    /*Méthode Tourdejeu qui simule un tour de jeu complet
    * le tour de jeu consiste au déplacement de tous les créatures 
    * lorsqu'une creature peut attaquer avec sa portée alors elle le fait
    * boucle for sur toutes les creatures du monde avec les actions deplace et combattre qui y sont faites
    */
    public void tourdeJeu(){
        // Le joueur joue en premier
        joueur.tourDeJeuPerso(this);
        
        for(Creature c : lesCreatures) {
            
            if (c instanceof Lapin lapin){
                lapin.deplace(position);
            }
            if (c instanceof Paysan paysan){
                paysan.deplace(position);
            }
                
            if (c instanceof Guerrier guerrier){
                guerrier.deplace(position);
                for(Creature C : lesCreatures){
                    if (C!=c){
                        guerrier.combattre(C);
                        }
                    }
                }
            if (c instanceof Loup loup){
                loup.deplace(position);
                for(Creature C : lesCreatures){
                    if (C!=c){
                        loup.combattre(C);
                        }
                    }
                }
            if (c instanceof Archer archer){
                archer.deplace(position);
                for(Creature C : lesCreatures){
                    if (C!=c){
                        archer.combattre(C);                       
                     }
                 }
            }
        }
    }
    
    public void supprimerObjet(Utilisable util){
        int compteur = 0;
        for(Objet u: this.lesObjets){
            if (u.equals(util)){
                this.lesObjets.remove(compteur);
                this.positionObjet.remove(compteur);
            }
        }
    }
    
    public void supprimerCreature(Creature crea){
        int compteur = 0;
        for(Creature c: this.lesCreatures){
            if (c.equals(crea)){
                this.lesCreatures.remove(compteur);
                this.position.remove(compteur);
            }
        }
    }
}
