/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package org.centrale.objet.WoE;
import java.util.Random ;
import java.util.ArrayList;

/**
 * Classe de gestion d'un monde contenant un archer, un paysan et 2 lapins
 * @author vdufo
 */
public class World {
    // Attributs de la classe
    /** 
     * robin liste d'archers (privé)
     * peon liste de paysans (privé)
     * bugs liste de lapins (privé)
     * warrior liste de guerriers (privé)
     * wolfie liste de loups (privé)
     * lescreatures liste de toutes les créatures(privé)
     * position liste des positions de tous les personnages (privé)
     */
    private ArrayList<Archer> robin;
    private ArrayList<Paysan> peon;
    private ArrayList<Lapin> bugs;
    private ArrayList<Guerrier> warrior;
    private ArrayList<Loup> wolfie;
    private ArrayList<Creature> lescreatures;
    private ArrayList<Point2D> position;
    
    /**
     * Constructeur de la classe Wolrd sans paramètre qui créer un monde alétoire de 1 à 20 créatures de chaque classe
     */
    
    public World(){
        this.robin = new ArrayList<>();
        this.peon = new ArrayList<>();
        this.bugs = new ArrayList<>();
        this.warrior = new ArrayList<>();
        this.wolfie = new ArrayList<>();
        this.lescreatures = new ArrayList<>();
        this.position = new ArrayList<>();
        
        Random alea = new Random();
        int construire = alea.nextInt(20)+1;
        for(int i=0; i< construire;i++){
            this.robin.add(new Archer());
            this.lescreatures.add(this.robin.get(i));
            this.position.add(this.robin.get(i).getPos());
        }
        construire = alea.nextInt(20)+1;
        for(int i=0; i< construire;i++){
            this.peon.add(new Paysan());
            this.lescreatures.add(this.peon.get(i));
            this.position.add(this.peon.get(i).getPos());
        }
        construire = alea.nextInt(20)+1;
        for(int i=0; i< construire;i++){
            this.bugs.add(new Lapin());
            this.lescreatures.add(this.bugs.get(i));
            this.position.add(this.bugs.get(i).getPos());
        }
        construire = alea.nextInt(20)+1;
        for(int i=0; i< construire;i++){
            this.warrior.add(new Guerrier());
            this.lescreatures.add(this.warrior.get(i));
            this.position.add(this.warrior.get(i).getPos());
        }
        construire = alea.nextInt(20)+1;
        for(int i=0; i< construire;i++){
            this.wolfie.add(new Loup());
            this.lescreatures.add(this.wolfie.get(i));
            this.position.add(this.wolfie.get(i).getPos());
        }
    }

    // Accesseurs
    
    /**
    * Accesseur sur l’attribut robin
    * @return robin 
    */
    public ArrayList<Archer> getRobin(){
        return robin;
    }
    
    /**
    * Accesseur sur l’attribut peon
    * @return peon 
    */
    public ArrayList<Paysan> getPeon(){
        return peon;
    }
    
    /**
    * Accesseur sur l’attribut bugs1
    * @return bugs1
    */
    public ArrayList<Lapin> getLapin(){
        return bugs;
    }
    
    /**
    * Accesseur sur l’attribut warrior
    * @return warrior
    */
    public ArrayList<Guerrier> getWarrior(){
        return warrior;
    }
    
    /**
    * Accesseur sur l’attribut wolfie
    * @return wolfie
    */
    
    public ArrayList<Loup> getWolfie(){
        return wolfie;
    }
    
    /**
    * Accesseur sur l’attribut position
    * @return position
    */
    public ArrayList<Point2D> getPosition(){
        return position;
    }
    
    /**
    * Accesseur sur l’attribut creature
    * @return lescreatures
    */
    public ArrayList<Creature> getCreature(){
        return lescreatures;
    }
    /**
     * Méthode privé memePosition qui vérifie si deux points sont identiques
     * @param A un point2D à tester
     * @param B un 2e point2D à tester
     * @return True si les coordonnées du point A et les coordonnées du points B sont identiques, False sinon
     */
    private boolean memePosition(Point2D A, ArrayList<Point2D> liste){
        boolean b = false;
        for(int i =0; i<liste.size();i++){
            if(A.getY()==liste.get(i).getY() && A.getX()==liste.get(i).getX()){
                b = true;
                break;
            }
        }
        return b;
    }

    /**
     * Méthode de création d'un monde aléatoire qui ne prend pas de paramètre en entrée et qui initialise les positions des personnages et créatures du monde
     * Les personnages et créatures ne sont pas initialisés à la même position
     * La méthode memePosition() est utilisé pour s'assurer de cela
     * Les coordonnées sont choisit aléatoirement sur une grille 10x10 à l'aide du package java random
     */
    public void creerMondeAlea(){
        Random alea = new Random();
        ArrayList<Point2D> listePosition = new ArrayList<>();
        
        for(int i = 0;i<this.robin.size();i++){
            this.robin.get(i).getPos().setPosition(alea.nextInt(20),alea.nextInt(20));
            while(memePosition(this.robin.get(i).getPos(),listePosition)){
                System.out.println("MEME POSITION : "+robin.get(i).getPos()+" "+listePosition);
                this.robin.get(i).getPos().setPosition(alea.nextInt(20),alea.nextInt(20));
            }
            listePosition.add(this.robin.get(i).getPos());
        }
        
        for(int i = 0;i<this.peon.size();i++){
            this.peon.get(i).getPos().setPosition(alea.nextInt(20),alea.nextInt(20));
            while(memePosition(this.peon.get(i).getPos(),listePosition)){
            System.out.println("MEME POSITION : "+peon.get(i).getPos()+" "+listePosition);
                this.peon.get(i).getPos().setPosition(alea.nextInt(20),alea.nextInt(20));
            }
            listePosition.add(this.peon.get(i).getPos());
        }
        
        for(int i = 0;i<this.bugs.size();i++){
            this.bugs.get(i).getPos().setPosition(alea.nextInt(20),alea.nextInt(20));
            while(memePosition(this.bugs.get(i).getPos(),listePosition)){
                System.out.println("MEME POSITION : "+bugs.get(i).getPos()+" "+listePosition);
                this.bugs.get(i).getPos().setPosition(alea.nextInt(20),alea.nextInt(20));
            }
            listePosition.add(this.bugs.get(i).getPos());
        }
        
        for(int i = 0;i<this.warrior.size();i++){
            this.warrior.get(i).getPos().setPosition(alea.nextInt(20),alea.nextInt(20));
            while(memePosition(this.warrior.get(i).getPos(),listePosition)){
                System.out.println("MEME POSITION : "+warrior.get(i).getPos()+" "+listePosition);
                this.warrior.get(i).getPos().setPosition(alea.nextInt(20),alea.nextInt(20));
            }
            listePosition.add(this.warrior.get(i).getPos());
        }
        
        for(int i = 0;i<this.wolfie.size();i++){
            this.wolfie.get(i).getPos().setPosition(alea.nextInt(20),alea.nextInt(20));
            while(memePosition(this.wolfie.get(i).getPos(),listePosition)){
                System.out.println("MEME POSITION : "+wolfie.get(i).getPos()+" "+listePosition);
                this.wolfie.get(i).getPos().setPosition(alea.nextInt(20),alea.nextInt(20));
            }
            listePosition.add(this.wolfie.get(i).getPos());
        }
    }  
    
    /**
     * Méthode sans paramètre en entrée qui permet d'afficher la position de tous les personnages ainsi que leur nombre de point de vie 
     */
    public void afficheWorld(){
        System.out.println(" ");
        
        for(int i = 0;i<this.robin.size();i++){
            System.out.println("Archer numero : "+(i+1)+" / Point de vie : "+this.robin.get(i).getPtVie()+", Position : "+this.robin.get(i).getPos());
        }
        System.out.println(" ");
        
        for(int i = 0;i<this.peon.size();i++){
            System.out.println("Paysan numero : "+(i+1)+" / Point de vie : "+this.peon.get(i).getPtVie()+", Position : "+this.peon.get(i).getPos());
        }
        System.out.println(" ");
        
        for(int i = 0;i<this.bugs.size();i++){
            System.out.println("Lapin numero : "+(i+1)+" / Point de vie : "+this.bugs.get(i).getPtVie()+", Position : "+this.bugs.get(i).getPos());
        }
        System.out.println(" ");
        
        for(int i = 0;i<this.warrior.size();i++){
            System.out.println("Guerrier numero : "+(i+1)+" / Point de vie : "+this.warrior.get(i).getPtVie()+", Position : "+this.warrior.get(i).getPos());
        }
        System.out.println(" ");
        
        for(int i = 0;i<this.wolfie.size();i++){
            System.out.println("Loup numero : "+(i+1)+" / Point de vie : "+this.wolfie.get(i).getPtVie()+", Position : "+this.wolfie.get(i).getPos());
        }
        System.out.println(" ");
    }
    
    /*Méthode Tourdejeu qui simule un tour de jeu complet
    * le tour de jeu consiste au déplacement de tous les créatures 
    * lorsqu'une creature peut attaquer avec sa portée alors elle le fait
    * boucle for sur toutes les creatures du monde avec les actions deplace et combattre qui y sont faites
    */
    
    public void tourdeJeu(){
        
        for(Creature c : lescreatures) {
            
            c.deplace(position);
            if (c instanceof Guerrier){
                for(Creature C : lescreatures){
                    if (C!=c){
                        ((Guerrier)c).combattre(C);
                    }
                }
            }
            if (c instanceof Loup){
                for(Creature C : lescreatures){
                    if (C!=c){
                        ((Guerrier)c).combattre(C);
                    }
                }
            }
            if (c instanceof Archer){
                for(Creature C : lescreatures){
                    if (C!=c){
                        ((Guerrier)c).combattre(C);
                    }
                }
            }
        }
 
    }
}
